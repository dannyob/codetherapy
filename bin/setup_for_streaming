#!guile \
-e main -s
!#

(use-modules (ice-9 format))
(use-modules (ice-9 match))
(use-modules (ice-9 popen))
(use-modules (ice-9 textual-ports))
(use-modules (json))
(use-modules (srfi srfi-1))
(use-modules (srfi srfi-43))

(define* (flatten lst #:optional depth)
  "Return a list that recursively concatenates the sub-lists of LST,
up to DEPTH levels deep.  When DEPTH is #f, the entire tree is
flattened. (From https://web.archive.org/web/20191003181009/https://github.com/guildhall/guile-haunt/blob/master/haunt/utils.scm )"
  (if (and (number? depth) (zero? depth))
      lst
      (fold-right (match-lambda*
                    (((sub-list ...) memo)
                     (append (flatten sub-list (and depth (1- depth)))
                             memo))
                    ((elem memo)
                     (cons elem memo)))
                  '()
                  lst)))

(define (shell-quote-argument s)
  "Escape a string so that it will be parsed correctly when supplied as an
argument to a shell."
  (let ((char-set:not-escaped (string->char-set "_./\n]" char-set:letter+digit)))
    (string-fold (lambda (a b)
                   (string-append b (if
                                     (char-set-contains? char-set:not-escaped a) "" "\\")
                                  (if (char=? #\newline a) "'\n'" (string a))))
                 "" s)))

(define (shell->list command)
  "Returns the output of shell command as a list of lines. The return status of the command is given as a second return value."
  (let* ((port (open-input-pipe command))
         (str  (string-split (get-string-all port) #\newline)))
    (values str (close-pipe port))))

(define (shell->string command)
  "Returns the output of shell command as a string. The return status of the command is given as a second return value."
  (let* ((port (open-input-pipe command)))
    (values (get-string-all port) (close-pipe port))))

(define (s command)
  "Local shorthand for shell->string."
  (format #t "~a\n" command)
  (shell->string command))

(define (sway-tree)
  "Returns sexp equivalent of sway's layout tree: all open windows, containers, outputs, workspaces, and so on."
  (json-string->scm (shell->string "swaymsg -t get_tree")))

(define (json-map f s)
  "A version of map that's agnostic about whether it is applied over vectors or lists. Useful as the json module uses both."
  (cond ((vector? s) (vector->list (vector-map (lambda (_ x) (f x)) s)))
        ((list? s) (f s))))

(define (swaytree-walk func s)
  "Walks every object that has an 'id' in the sway tree. Goes into 'node' values
of objects, which are containers for further, embedded, objects.

Func is called with each object in turn, and its return value used to fill a
list whose structure reflects the structure of the tree objects."
  (let ((nodes (assoc-ref s "nodes"))
        (id (assoc-ref s "id")))
    (cond ((and id nodes) (cons (func s)
                                (json-map (lambda (x) (swaytree-walk func x)) nodes)))
          ((and id (not nodes)) (func s))
          (else '()))
    ))

(define (flat-windows)
  "Returns a flat list of all windows ids in sway-tree."
  (flatten (swaytree-walk
            (lambda (s)
              (if (equal? "con" (assoc-ref s "type")) (assoc-ref s "id") '()))
            (sway-tree))))

(define (new-windows func)
  "Runs func (which should create some new windows), and then returns list of new window ids created."
  (let ((before (flat-windows)))
    (func)
    (sleep 2)
    (let ((after (flat-windows)))
      (lset-difference eqv? after before))))

(define (kitties)
  "Set up four kitty instances, the first running weechat in a tmux session, the
reset attaching to that session"
  (s "kitty --title chat1 -o font_size=14 --detach tmux new-session -s weechat weechat")
  (s "kitty --title chat2 -o font_size=14 --detach tmux attach-session -t weechat")
  (s "kitty --title chat3 -o font_size=14 --detach tmux attach-session -t weechat")
  (s "kitty --title chat4 -o font_size=14 --detach tmux attach-session -t weechat"))

(define (kill-kitties)
  "Kills previous kitties, if they exist."
  (s "tmux kill-session -t weechat")
  (s "swaymsg '[con_mark=\"teleprompt\"] kill'")
  )

(define (window-id-swaymsg window-number command)
  "Construct swaymsg command that will be narrowed to a particular window number."
  (s (string-append "swaymsg '[con_id=\"" (number->string window-number) "\"] " command "'")))

(define (setup-kitties)
  "Create, and movie kitty chat terminals to fixed location at bottom of each workspace."
  (let ((kitty-windows (list->vector (new-windows kitties))))
    (vector-for-each (lambda (i a)
                       (window-id-swaymsg a (string-append "mark teleprompt" (number->string i)))
                       (window-id-swaymsg a (string-append "move window to workspace " (number->string (+ i 1))))
                       (window-id-swaymsg a "move down")
                       (window-id-swaymsg a "resize set height 303px"))
                     kitty-windows)))

(define (reboot-pulseaudio)
  (s "pulseaudio -k")
  (s "pulseaudio -D"))

(define (make-stream )
  "Create the STREAM sink"
  (s "pacmd load-module module-null-sink sink_name=STREAM sink_properties=device.description=\"STREAM\""))

(define (make-stream-and-out)
  "Find the USB and STREAM sink ids, and combine them as a sink."
  (let ((slaves (s "pactl list short sinks | grep -E '(STREAM|usb)'| cut -f1 | tr '\\n' ','")))
    (s (format #f "pacmd load-module module-combine-sink sink_name=STREAM_and_out sink_properties=device.description=\"STREAM_and_out\" slaves=\"~a\"" slaves))))

(define (main args)
  (display "Setting up everything!")
  (kill-kitties)
  (setup-kitties)
  (reboot-pulseaudio)
  (make-stream)
  (make-stream-and-out))
