#!guile \
-e main -s
!#
;;; swaybar-dob-guile --- Swaybar in Guile
;;; A program to generate a statusbar, using the i3 bar input protocol used by both i3 and sway.
;;; See: <https://i3wm.org/docs/i3bar-protocol.html>
;;
;; The protocol is JSON-based, and is essentially a JSON protocol version
;; object, followed by an array of status bar updates. This array never quite
;; gets to its closing "]".
;;
;; We output this protocol over STDOUT.
;; 
;; In our status bar, we have:
;; - The last Twitch follower.
;; - The currently playing track.
;; - The time and date.

;;; Code:

(use-modules (json))
(use-modules (srfi srfi-1))
(use-modules (ice-9 vlist))

(use-modules (ice-9 hash-table))
(use-modules (ice-9 format))
(use-modules (ice-9 receive))
(use-modules (ice-9 match))
(use-modules (rnrs bytevectors))
(use-modules (srfi srfi-19))
(use-modules (srfi srfi-9))
(use-modules (srfi srfi-43))
(use-modules (ice-9 popen))
(use-modules (ice-9 textual-ports))
(use-modules (web client))
(use-modules (gnutls))

(define (shell->string command)
  "Returns the output of shell command as a string. The return status of the command is given as a second return value."
  (let* ((port (open-input-pipe command)))
    (values (get-string-all port) (close-pipe port))))

(define (shell->list command)
  (let* ((port (open-input-pipe command))
         (str  (string-split (get-string-all port) #\newline)))
    (values str (close-pipe port))))

(define (s command)
  "Local shorthand for shell->string."
  (shell->string command))

(define-record-type <bar-block>
  (make-bar-block name color pango run-func)
  bar-block?
  (name bar-block-name)
  (color bar-block-color)
  (pango bar-block-pango)
  (run-func bar-block-run-func))

(define (bar-block->alist bb)
  `(("name" . ,(bar-block-name bb))
    ("color" . ,(bar-block-color bb))
    ("markup" . ,(if (bar-block-pango bb) "pango" "none"))
    ("full_text" . ,(apply (bar-block-run-func bb) '()) )))

(define date-block (make-bar-block
                    "todays-date"
                    "#008888"
                    #f
                    (lambda ()
                      (date->string (current-date) "~4"))))

(define track-block
  (make-bar-block
   "current-track"
   "#ff0000"
   #f
   (lambda ()
     (let*
         ((track-info (read
                       (open-input-string (s "guile -e main -s /home/danny/Public/src/dob/codetherapy/bin/update-track --sexp"))))
          (error (assoc-ref track-info "error"))
          (title (assoc-ref track-info "xesam-title"))
          (artist (assoc-ref track-info "xesam-artist")))
       (cond (error "???")
             ((and title artist) (string-append title " / " artist))
             (title title)
             (artist artist)
             (else ""))))))


(define is-it-time
  (let ((time-store '()))
    (lambda (tag interval)
      (let ((timed-tag (assoc-ref time-store tag)))
        (cond ((and timed-tag
                    (> (abs (time-second (time-difference (current-time) timed-tag))) interval))
               (set! time-store (assoc-set! time-store tag (current-time)))
               #t)
              ((not timed-tag) (set! time-store (acons tag (current-time) time-store))
               #t)
              (else #f))))))


(define battery-charging-chars '((  20 . "\uf585")
                                 (  30 . "\uf586")
                                 (  40 . "\uf587")
                                 (  60 . "\uf588")
                                 (  80 . "\uf589")
                                 (  90 . "\uf58A")
                                 ( 100 . "\uf584")))

(define battery-discharging-chars '((  10 . "\uf579")
                                    (  20 . "\uf57a")
                                    (  30 . "\uf57b")
                                    (  40 . "\uf57c")
                                    (  50 . "\uf57d")
                                    (  60 . "\uf57e")
                                    (  70 . "\uf57f")
                                    (  80 . "\uf580")
                                    (  90 . "\uf581")
                                    ( 100 . "\uf578")
                                    ))

(define (find-closest-battery remains value winner)
  (cond
   ((nil? remains) winner)
   ((< (abs (- value (caar remains))) (abs (- value (car winner))))
    (find-closest-battery (cdr remains) value (car remains)))
   (else (find-closest-battery (cdr remains) value winner))))

(define battery-backlog
  (let ((battery-history '()))
    (lambda (current-val)
      (if (or (nil? battery-history)
              (> (abs (time-second (time-difference (caar battery-history) (current-time)))) 600))
          (set! battery-history (take (cons `(,(current-time) . ,current-val) battery-history) (min (+ 1 (length battery-history)) 6))))
      battery-history)))

(define (battery-rendition bassoc)
  "Given a alist of upower key/values, construct a status text"
  (let* ((state (assoc-ref bassoc "state"))
         (percentage (assoc-ref bassoc "percentage"))
         (percentage-num (string->number (string-filter (lambda (x) (not (equal? #\% x))) percentage)))
         (percentage-string (format #f "~d" (inexact->exact (round percentage-num))))
         (time-to-empty (assoc-ref bassoc "time to empty"))
         (time-to-full (assoc-ref bassoc "time to full")))
    (string-append
     "<span face=\"ModeSeven\" foreground=\""
     (cond ((< percentage-num 20) "#ff0000")
           ((> percentage-num 80) "#00ff00")
           (else "#ffff00"))
     "\">"
     "<span face=\"Sparks\">{"
     (string-join (reverse (map cdr (battery-backlog percentage-string))) ",")
     "}</span> "
     (if (string=? state "charging") (cdr (find-closest-battery battery-charging-chars percentage-num '(-100 . "X"))) "")
     (if (string=? state "discharging") (cdr (find-closest-battery battery-discharging-chars percentage-num '(-100. "X"))) "")
     percentage-string
     "</span>"
     )))

(define battery-block
  (make-bar-block

   "battery-info"
   "#ffff00"
   #t
   (lambda ()
     (let* ((bat-report (shell->list "upower -i /org/freedesktop/UPower/devices/DisplayDevice"))
            (bat-assoc  (map (lambda (x) (apply cons* (map string-trim-both (string-split x #\:)))) bat-report)))
       (battery-rendition bat-assoc)))))

(define twitch-client-id (assoc-ref (read (open (string-append (getenv "HOME") "/Private/codetherapy/secrets/twitch-api") O_RDONLY)) 'client-id))

(define (get-twitch-followers)
  (receive (metadata response)
      (http-request "https://api.twitch.tv/kraken/channels/128400135/follows" #:headers `((accept . ((application/vnd.twitchtv.v5+json))) (client-id . ,twitch-client-id)))
    (json-string->scm (utf8->string response))))

(define (get-latest-follower-alist)
  (match (get-twitch-followers)
    ((("follows" . #((("user" . follower-alist) _ ... ) _ ... )) . _) follower-alist)
    (_ #f)
    ))

(define (render-follower)
  (let* ((latest-follower-alist (get-latest-follower-alist))
         (latest-follower-name (assoc-ref latest-follower-alist "display_name")))
    (string-append
     "Latest follower: "
     (if latest-follower-name latest-follower-name "???")
     " "
     )))

(define follower-block
  (make-bar-block
   "follower-info"
   "#00ffff"
   #f
   (let ((cached-follower-text (render-follower)))
     (lambda ()
       (if (is-it-time "follower-block" 20)
           (set! cached-follower-text (render-follower)))
       cached-follower-text))))

(define initial-json '(("version" . 1)))

(define (main args)
  (scm->json initial-json)
  (display "\n")
  (display "[\n")
  (display "[]\n")
  (loopy (list follower-block track-block battery-block date-block)))

(define (loopy status)
  (display "\n,")
  (scm->json (list->vector (map bar-block->alist status)))
  (force-output)
  (sleep 1)
  (loopy status))
;;; swaybar-dob-guile ends here

